<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="UniqueID Generator" type="AttributeGenerator">
	<Description>
		Creates unique identifiers
	</Description>
	<Source><![CDATA[
import sailpoint.object.*;
import sailpoint.api.*;
import java.util.*;

    public String generateUniqueIdentifier(){
		
		String initial = "C";
		String suffix = "W";
		String username = "";
		int totalIterations = 0;
		for(int counter=0; counter<10; counter++) {
			// Range per counter=0: [C00000W, C09999W]
			// Range per counter=1: [C10000W, C19999W]
			// Range per counter=9: [C90000W, C99999W]
			int totalAccounts = totalAccountsThatStartWith(initial, counter); // Cerca gli account che INIZIANO con C0, C1, C2, ..., C9
			log.debug("Rule - UniqueID Generator: Found totalAccounts=" + totalAccounts + " that start with " + initial + counter);
			for(int nextAccount=totalAccounts; nextAccount<=10000; nextAccount++) {
				totalIterations++;
				if(nextAccount < 10000) {
					//nextAccount = 5723
					username = "C" + counter + padLeftWithZeroes(String.valueOf(nextAccount)) + "W"; 
					log.debug("Rule - UniqueID Generator: username generated="  + username);
				}
				 else if(nextAccount == 10000) {
					//nextAccount = 10000
					username = "C" + (counter+1) + "0000" + "W"; // C10000W, C20000W, ..., C90000W
					log.debug("Rule - UniqueID Generator: username generated limit case=" + username);
				}
				if(isUnique(username)){
					log.debug("Rule - UniqueID Generator: unique username found in " + totalIterations + " iterations");
					return username;
				}
			}
		}
		return "NO_UNIQUE_USERNAME_FOUND";
	}

	public String padLeftWithZeroes(String totalAccounts) {
		String pad = "";
        if (totalAccounts.length() == 1){
            pad = "000";
        } else if(totalAccounts.length() == 2){
            pad = "00";
        } else if(totalAccounts.length() == 3){
            pad = "0";
        } else if(totalAccounts.length() == 4){
            pad = "";
        } else if(totalAccounts.length() >= 5){
            //Log errore: totale account trovati = totalAccounts ma sono supportati massimo fino a 9999.
			log.debug("Rule - UniqueID Generator: totalAccounts non può superare 10000 ");
        }
		return pad + totalAccounts;
    }

     public boolean isUnique(String username){
		 // Controlla puntualmente l'esistenza di account con un dato username 
         List SOURCE_IDS = new ArrayList(Arrays.asList(new String[]{"3eb7a5f306bd4c8bb5cf182e3a9ec78c"}));  // Ricerca tramite ID della Source AD
         String PROMOTED_ATTR_NAME = "sAMAccountName"; // Attributo da cercare
         String SEARCH_OP = "Equals"; 
         List SEARCH_VALUES = new ArrayList();
         SEARCH_VALUES.add(username);
         return idn.attrSearchCountAccounts(SOURCE_IDS, PROMOTED_ATTR_NAME, SEARCH_OP, SEARCH_VALUES) == 0; // Ritorna TRUE se non ci sono account che matchano il filtro
     }

     public int totalAccountsThatStartWith(String initial, int counter){
		 // Controlla il totale di account che iniziano con una stringa
		 // initial = "C";
		 // counter = 0;
         List SOURCE_IDS = new ArrayList(Arrays.asList(new String[]{"3eb7a5f306bd4c8bb5cf182e3a9ec78c"}));  // Ricerca tramite ID della Source AD
         String PROMOTED_ATTR_NAME = "sAMAccountName"; // Attributo da cercare
         String SEARCH_OP = "StartsWith"; 
         List SEARCH_VALUES = new ArrayList();
         SEARCH_VALUES.add(initial + counter); // C0*, C1*, ...
		  
         return idn.attrSearchCountAccounts(SOURCE_IDS, PROMOTED_ATTR_NAME, SEARCH_OP, SEARCH_VALUES);
     }


// Prendi USER_NAME dalla Source HCM. Fonte: https://developer.sailpoint.com/docs/extensibility/rules/rule-utility/#get-multiple-attributes-from-the-first-account-retreived-from-a-source
String hcmUsername = identity.getAttribute("hcmUsername");

if(hcmUsername == null || hcmUsername.isEmpty()){
	// HCM non ci ha passato nessuna username. Generiamo una user univoca
	log.debug("Rule - UniqueID Generator: start generation of a new UserID");
	return generateUniqueIdentifier();
}
// HCM ci ha già passato la username, non dobbiamo rigenerarla ma usiamo questa!
log.debug("Rule - UniqueID Generator: username '" + hcmUsername + "' already present");
return hcmUsername;

		]]></Source>
</Rule>
